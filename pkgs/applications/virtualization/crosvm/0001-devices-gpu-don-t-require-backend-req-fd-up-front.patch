From c8a157b1457fe5aa4507d3ec55bf235ea3f407a8 Mon Sep 17 00:00:00 2001
From: Alyssa Ross <hi@alyssa.is>
Date: Sat, 15 Apr 2023 18:21:38 +0000
Subject: [PATCH] devices: gpu: don't require backend req fd up front

There's no guarantee in the vhost-user protocol that backend_req_conn
will have been established at the time that start_queue() is called,
and indeed some vhost-user frontends don't send
VHOST_USER_SET_VRING_KICK until after VHOST_USER_SET_SLAVE_REQ_FD.
Using such a frontend caused crosvm to crash.

Change-Id: Ia7aaa434c25a4fa4396e6d51bbb9dbf88c91a173
Reviewed-on: https://chromium-review.googlesource.com/c/crosvm/crosvm/+/4543309
Reviewed-by: Keiichi Watanabe <keiichiw@chromium.org>
Reviewed-by: Idan Raiter <idanr@google.com>
Commit-Queue: Keiichi Watanabe <keiichiw@chromium.org>
(cherry picked from commit 288edeafe3f4de2c849d60fed12405c98e6bfa40)
---
 devices/src/virtio/gpu/mod.rs                 | 14 ++++-----
 devices/src/virtio/gpu/virtio_gpu.rs          | 11 +++++--
 devices/src/virtio/vhost/user/device/gpu.rs   | 29 +++++++------------
 .../virtio/vhost/user/device/gpu/sys/unix.rs  |  3 +-
 .../vhost/user/device/gpu/sys/windows.rs      |  2 +-
 5 files changed, 29 insertions(+), 30 deletions(-)

diff --git a/devices/src/virtio/gpu/mod.rs b/devices/src/virtio/gpu/mod.rs
index 179f8b1d3..49a5e6557 100644
--- a/devices/src/virtio/gpu/mod.rs
+++ b/devices/src/virtio/gpu/mod.rs
@@ -210,7 +210,7 @@ fn build(
     display_event: Arc<AtomicBool>,
     rutabaga_builder: RutabagaBuilder,
     event_devices: Vec<EventDevice>,
-    mapper: Box<dyn SharedMemoryMapper>,
+    mapper: Arc<Mutex<Option<Box<dyn SharedMemoryMapper>>>>,
     external_blob: bool,
     #[cfg(windows)] wndproc_thread: &mut Option<WindowProcedureThread>,
     udmabuf: bool,
@@ -1058,7 +1058,7 @@ pub struct Gpu {
     exit_evt_wrtube: SendTube,
     #[cfg(unix)]
     gpu_control_tube: Option<Tube>,
-    mapper: Option<Box<dyn SharedMemoryMapper>>,
+    mapper: Arc<Mutex<Option<Box<dyn SharedMemoryMapper>>>>,
     resource_bridges: Option<ResourceBridges>,
     event_devices: Vec<EventDevice>,
     worker_thread: Option<WorkerThread<()>>,
@@ -1150,7 +1150,7 @@ impl Gpu {
             exit_evt_wrtube,
             #[cfg(unix)]
             gpu_control_tube: Some(gpu_control_tube),
-            mapper: None,
+            mapper: Arc::new(Mutex::new(None)),
             resource_bridges: Some(ResourceBridges::new(resource_bridges)),
             event_devices,
             worker_thread: None,
@@ -1177,7 +1177,7 @@ impl Gpu {
         &mut self,
         fence_state: Arc<Mutex<FenceState>>,
         fence_handler: RutabagaFenceHandler,
-        mapper: Box<dyn SharedMemoryMapper>,
+        mapper: Arc<Mutex<Option<Box<dyn SharedMemoryMapper>>>>,
     ) -> Option<Frontend> {
         let rutabaga_builder = self.rutabaga_builder.take()?;
         let rutabaga_server_descriptor = self.rutabaga_server_descriptor.take();
@@ -1273,7 +1273,7 @@ impl VirtioDevice for Gpu {
             keep_rds.push(libc::STDERR_FILENO);
         }
 
-        if let Some(ref mapper) = self.mapper {
+        if let Some(ref mapper) = *self.mapper.lock() {
             if let Some(descriptor) = mapper.as_raw_descriptor() {
                 keep_rds.push(descriptor);
             }
@@ -1391,7 +1391,7 @@ impl VirtioDevice for Gpu {
         #[cfg(unix)]
         let gpu_cgroup_path = self.gpu_cgroup_path.clone();
 
-        let mapper = self.mapper.take().context("missing mapper")?;
+        let mapper = Arc::clone(&self.mapper);
         let rutabaga_builder = self
             .rutabaga_builder
             .take()
@@ -1453,7 +1453,7 @@ impl VirtioDevice for Gpu {
     }
 
     fn set_shared_memory_mapper(&mut self, mapper: Box<dyn SharedMemoryMapper>) {
-        self.mapper = Some(mapper);
+        self.mapper.lock().replace(mapper);
     }
 
     fn expose_shmem_descriptors_with_viommu(&self) -> bool {
diff --git a/devices/src/virtio/gpu/virtio_gpu.rs b/devices/src/virtio/gpu/virtio_gpu.rs
index 34c9edd37..3a98eaf0d 100644
--- a/devices/src/virtio/gpu/virtio_gpu.rs
+++ b/devices/src/virtio/gpu/virtio_gpu.rs
@@ -36,6 +36,7 @@ use rutabaga_gfx::RutabagaIovec;
 use rutabaga_gfx::Transfer3D;
 use rutabaga_gfx::RUTABAGA_MEM_HANDLE_TYPE_DMABUF;
 use rutabaga_gfx::RUTABAGA_MEM_HANDLE_TYPE_OPAQUE_FD;
+use sync::Mutex;
 use vm_control::gpu::DisplayParameters;
 use vm_control::gpu::GpuControlCommand;
 use vm_control::gpu::GpuControlResult;
@@ -303,7 +304,7 @@ pub struct VirtioGpu {
     cursor_scanout: VirtioGpuScanout,
     // Maps event devices to scanout number.
     event_devices: Map<u32, u32>,
-    mapper: Box<dyn SharedMemoryMapper>,
+    mapper: Arc<Mutex<Option<Box<dyn SharedMemoryMapper>>>>,
     rutabaga: Rutabaga,
     resources: Map<u32, VirtioGpuResource>,
     external_blob: bool,
@@ -346,7 +347,7 @@ impl VirtioGpu {
         display_event: Arc<AtomicBool>,
         rutabaga_builder: RutabagaBuilder,
         event_devices: Vec<EventDevice>,
-        mapper: Box<dyn SharedMemoryMapper>,
+        mapper: Arc<Mutex<Option<Box<dyn SharedMemoryMapper>>>>,
         external_blob: bool,
         udmabuf: bool,
         fence_handler: RutabagaFenceHandler,
@@ -887,6 +888,9 @@ impl VirtioGpu {
         };
 
         self.mapper
+            .lock()
+            .as_mut()
+            .expect("No backend request connection found")
             .add_mapping(source.unwrap(), offset, Protection::read_write())
             .map_err(|_| ErrUnspec)?;
 
@@ -903,6 +907,9 @@ impl VirtioGpu {
 
         let shmem_offset = resource.shmem_offset.ok_or(ErrUnspec)?;
         self.mapper
+            .lock()
+            .as_mut()
+            .expect("No backend request connection found")
             .remove_mapping(shmem_offset)
             .map_err(|_| ErrUnspec)?;
         resource.shmem_offset = None;
diff --git a/devices/src/virtio/vhost/user/device/gpu.rs b/devices/src/virtio/vhost/user/device/gpu.rs
index 0f0aed7e2..7949eafa8 100644
--- a/devices/src/virtio/vhost/user/device/gpu.rs
+++ b/devices/src/virtio/vhost/user/device/gpu.rs
@@ -29,12 +29,12 @@ use vmm_vhost::message::VhostUserVirtioFeatures;
 use crate::virtio::gpu;
 use crate::virtio::vhost::user::device::handler::sys::Doorbell;
 use crate::virtio::vhost::user::device::handler::VhostBackendReqConnection;
-use crate::virtio::vhost::user::device::handler::VhostBackendReqConnectionState;
 use crate::virtio::vhost::user::device::handler::VhostUserBackend;
 use crate::virtio::DescriptorChain;
 use crate::virtio::Gpu;
 use crate::virtio::Queue;
 use crate::virtio::QueueReader;
+use crate::virtio::SharedMemoryMapper;
 use crate::virtio::SharedMemoryRegion;
 use crate::virtio::VirtioDevice;
 
@@ -90,7 +90,7 @@ struct GpuBackend {
     fence_state: Arc<Mutex<gpu::FenceState>>,
     queue_workers: [Option<AbortHandle>; MAX_QUEUE_NUM],
     platform_workers: Rc<RefCell<Vec<AbortHandle>>>,
-    backend_req_conn: VhostBackendReqConnectionState,
+    shmem_mapper: Arc<Mutex<Option<Box<dyn SharedMemoryMapper>>>>,
 }
 
 impl VhostUserBackend for GpuBackend {
@@ -175,21 +175,14 @@ impl VhostUserBackend for GpuBackend {
             let fence_handler =
                 gpu::create_fence_handler(mem.clone(), reader.clone(), self.fence_state.clone());
 
-            let mapper = {
-                match &mut self.backend_req_conn {
-                    VhostBackendReqConnectionState::Connected(request) => {
-                        request.take_shmem_mapper()?
-                    }
-                    VhostBackendReqConnectionState::NoConnection => {
-                        bail!("No backend request connection found")
-                    }
-                }
-            };
-
             let state = Rc::new(RefCell::new(
                 self.gpu
                     .borrow_mut()
-                    .initialize_frontend(self.fence_state.clone(), fence_handler, mapper)
+                    .initialize_frontend(
+                        self.fence_state.clone(),
+                        fence_handler,
+                        Arc::clone(&self.shmem_mapper),
+                    )
                     .ok_or_else(|| anyhow!("failed to initialize gpu frontend"))?,
             ));
             self.state = Some(state.clone());
@@ -232,12 +225,12 @@ impl VhostUserBackend for GpuBackend {
         self.gpu.borrow().get_shared_memory_region()
     }
 
-    fn set_backend_req_connection(&mut self, conn: VhostBackendReqConnection) {
-        if let VhostBackendReqConnectionState::Connected(_) = &self.backend_req_conn {
+    fn set_backend_req_connection(&mut self, mut conn: VhostBackendReqConnection) {
+        let mut opt = self.shmem_mapper.lock();
+
+        if opt.replace(conn.take_shmem_mapper().unwrap()).is_some() {
             warn!("connection already established. overwriting");
         }
-
-        self.backend_req_conn = VhostBackendReqConnectionState::Connected(conn);
     }
 }
 
diff --git a/devices/src/virtio/vhost/user/device/gpu/sys/unix.rs b/devices/src/virtio/vhost/user/device/gpu/sys/unix.rs
index 48147dd67..dcbbec26e 100644
--- a/devices/src/virtio/vhost/user/device/gpu/sys/unix.rs
+++ b/devices/src/virtio/vhost/user/device/gpu/sys/unix.rs
@@ -33,7 +33,6 @@ use crate::virtio::vhost::user::device::gpu::MAX_QUEUE_NUM;
 use crate::virtio::vhost::user::device::listener::sys::VhostUserListener;
 use crate::virtio::vhost::user::device::listener::VhostUserListenerTrait;
 use crate::virtio::vhost::user::device::wl::parse_wayland_sock;
-use crate::virtio::vhost::user::VhostBackendReqConnectionState;
 use crate::virtio::Gpu;
 use crate::virtio::GpuDisplayParameters;
 use crate::virtio::GpuParameters;
@@ -273,7 +272,7 @@ pub fn run_gpu_device(opts: Options) -> anyhow::Result<()> {
         fence_state: Default::default(),
         queue_workers: Default::default(),
         platform_workers: Default::default(),
-        backend_req_conn: VhostBackendReqConnectionState::NoConnection,
+        shmem_mapper: Arc::new(Mutex::new(None)),
     });
 
     // Run until the backend is finished.
diff --git a/devices/src/virtio/vhost/user/device/gpu/sys/windows.rs b/devices/src/virtio/vhost/user/device/gpu/sys/windows.rs
index b6e14819d..653fe2bb6 100644
--- a/devices/src/virtio/vhost/user/device/gpu/sys/windows.rs
+++ b/devices/src/virtio/vhost/user/device/gpu/sys/windows.rs
@@ -218,7 +218,7 @@ pub fn run_gpu_device(opts: Options) -> anyhow::Result<()> {
         fence_state: Default::default(),
         queue_workers: Default::default(),
         platform_workers: Default::default(),
-        backend_req_conn: VhostBackendReqConnectionState::NoConnection,
+        shmem_mapper: Arc::new(Mutex::new(None)),
     });
 
     let handler = DeviceRequestHandler::new(backend, Box::new(VhostUserRegularOps));
-- 
2.40.1

